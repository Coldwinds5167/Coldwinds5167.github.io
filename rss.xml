<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>冷风喧嚣</title>
        <subtitle>懒狗一只</subtitle>
        <icon>https://coldwinds5167.github.io/images/favicon.ico</icon>
        <link>https://coldwinds5167.github.io</link>
        <author>
          <name>Coldwinds</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sat, 11 Dec 2021 19:56:34 +0800</pubDate>
        <lastBuildDate>Sat, 11 Dec 2021 19:56:34 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://coldwinds5167.github.io/2021/12/11/Re-Entrancy/</guid>
            <title>重入攻击</title>
            <link>https://coldwinds5167.github.io/2021/12/11/Re-Entrancy/</link>
            <category term="Blockchain" scheme="https://coldwinds5167.github.io/tags/Blockchain/" />
            <pubDate>Sat, 11 Dec 2021 19:56:34 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;重入攻击re-entrancy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重入攻击re-entrancy&#34;&gt;#&lt;/a&gt; 重入攻击（Re-Entrancy）&lt;/h1&gt;
&lt;h2 id=&#34;前置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前置&#34;&gt;#&lt;/a&gt; 前置&lt;/h2&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;​		以太坊智能合约能够调用其他外部合约的代码。而这些合约通常也处理以太币，在调用外部合约时，会要求合约提交外部调用，这些外部调用就可以被攻击者劫持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;​		可以通过 fallback 回退函数使合约执行更多的代码，包括回调原合约本身。因此重入攻击有点像间接调用递归函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;​		攻击合约可以回调合约上的一个函数，重新进入合约上的任意位置的代码并执行，如果没有防御措施，合约中的函数可能会被多次执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;大致操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大致操作&#34;&gt;#&lt;/a&gt; 大致操作&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;​		攻击者在外部地址部署攻击合约，并在该合约写入包含 fallback 回退函数的恶意代码，当合约把以太币发送到该地址时，恶意代码会被激活，这些代码会在没有保护的合约上执行函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;fallback回退函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fallback回退函数&#34;&gt;#&lt;/a&gt; Fallback 回退函数&lt;/h3&gt;
&lt;h4 id=&#34;fallback函数的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fallback函数的定义&#34;&gt;#&lt;/a&gt; fallback 函数的定义&lt;/h4&gt;
&lt;figure class=&#34;highlight solidity&#34;&gt;&lt;figcaption data-lang=&#34;Solidity (Ethereum)&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 无函数名、无函数参数、无返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当要调用的函数找不到时就会触发对 fallback 函数的自动调用。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 由于 Solidity 中提供了编译期检查，所以不能直接通过 Solidity 调用一个不存在的函数。但可以使用 Solidity 的提供的底层函数 address.call 来模拟这一行为。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;FallbackCalled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;fallback函数的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fallback函数的使用&#34;&gt;#&lt;/a&gt; fallback 函数的使用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;​		使用 send () 函数向某个合约直接转账时，这个行为没有发送任何数据，所以接收合约&lt;strong&gt;总是&lt;/strong&gt;会调用 fallback () 函数。&lt;/p&gt;
&lt;p&gt;​		如果要在合约中通过 send () 函数接收以太币，就必须定义 fallback 函数（否则异常），且 fallback 函数必须添加关键字 payable（否则结果将为 false）。&lt;/p&gt;
&lt;p&gt;​		发送以太币一方的合约中的 send () 函数可以不用定义 fallback 函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例&#34;&gt;#&lt;/a&gt; 实例&lt;/h2&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码&#34;&gt;#&lt;/a&gt; 代码&lt;/h3&gt;
&lt;p&gt;​		构造一个漏洞合约，用于存放一定数量的以太币。&lt;/p&gt;
&lt;p&gt;​		同时构造一个攻击合约，用于窃取漏洞合约的以太币。&lt;/p&gt;
&lt;figure class=&#34;highlight solidity&#34;&gt;&lt;figcaption data-lang=&#34;Solidity (Ethereum)&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 声明 solidity 版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;pragma&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;solidity&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token version number&#34;&gt;0.4.23&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 漏洞合约&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;theDAO&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;mapping&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; _credit&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; _who&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; _who&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 存款函数，攻击合约攻击时会先存入一定金额&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;deposit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;payable&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;emit&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 取款函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//_credit 为账户在该合约的存款&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//amount 是单次取款的金额&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 关键漏洞函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            _credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;emit&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 查询函数，查看账户在该合约中的存款&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;creditOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; to&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; _credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 查询函数，查看该合约中的余额&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;checkBalance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;balance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 攻击合约&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Attacker&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    theDAO &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; _newDAO&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;uint256&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; times &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; _owner&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Attacker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;theDAO addr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;payable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _owner &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; addr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;attack&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token comment&#34;&gt;// 向漏洞合约存钱&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;deposit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 从漏洞合约取钱&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;checkBalance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;balance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 记录函数，记录 fallback 函数执行次数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; times&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//fallback 回退函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;payable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	times &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;合约编译-部署与执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合约编译-部署与执行&#34;&gt;#&lt;/a&gt; 合约编译、部署与执行&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;​		合约的编译和部署在在线编译网站&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlbWl4LmV0aGVyZXVtLm9yZw==&#34;&gt; http://remix.ethereum.org&lt;/span&gt; 上进行，也可以选择本地编译器 solc 进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;编译合约&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译合约&#34;&gt;#&lt;/a&gt; 编译合约&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/image-20210424121204202.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意编译版本尽量与声明版本号一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;部署合约&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部署合约&#34;&gt;#&lt;/a&gt; 部署合约&lt;/h4&gt;
&lt;p&gt;​		本次演示合约将部署在本地环境&lt;strong&gt; JavaScript VM&lt;/strong&gt; 上。&lt;/p&gt;
&lt;p&gt;​		首先部署漏洞合约 theDAO，部署完成后向合约转入一定金额。&lt;/p&gt;
&lt;p&gt;​		接着部署&lt;strong&gt;攻击合约&lt;/strong&gt;，在部署时输入&lt;strong&gt;漏洞合约&lt;/strong&gt;的地址，并在部署时转入一定金额。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​		这里转账顺序与合约源码有关，有三种接受转账方式（部署转账、合约转账、直接转账），在编译前根据需求（安全性、便利性）灵活使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;执行攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行攻击&#34;&gt;#&lt;/a&gt; 执行攻击&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	1. 先分别点击**漏洞合约**的checkBalance选项和**攻击合约**的checkBalance选项，确认攻击前两个合约内的金额数量。
	2. 点击攻击合约的attack选项，对**漏洞合约**进行攻击。
	3. 待攻击完成后，分别点击**漏洞合约**的checkBalance选项和**攻击合约**的checkBalance选项，确认攻击后两个合约内的金额数量。
	4. 点击**攻击合约**的times选项，以**攻击合约**执行一次fallback回退函数为指标，查看攻击次数。
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;过程分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程分析&#34;&gt;#&lt;/a&gt; 过程分析&lt;/h4&gt;
&lt;figure class=&#34;highlight solidity&#34;&gt;&lt;figcaption data-lang=&#34;Solidity (Ethereum)&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;攻击合约执行_newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;deposit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  向漏洞合约转账&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei，这时漏洞合约会记录攻击合约的存款为&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  其中sender是攻击合约地址，value是我们转入的金额。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt;攻击合约接着执行_newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  意图从漏洞合约中取出&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。这时漏洞合约会比较我们希望取出的金额和存款   的金额，因为我们是存&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;取&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;，所以成功通过比较。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3.&lt;/span&gt;这时会执行漏洞合约中的msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  使漏洞合约向攻击合约转账&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4.&lt;/span&gt;攻击合约接收到&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei后执行fallback回退函数，从而执行_newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  继续从漏洞合约中取出&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5.&lt;/span&gt;因为在上一次取款中，漏洞合约执行msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   后因为回退函数跳转回withdraw的开头，并没有执行_credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;   &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;导致攻击合约在漏洞合约中的余额还是&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei（尽管我们已经取走   了&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei），因此漏洞合约继续向攻击合约转账&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6.&lt;/span&gt;攻击合约会不断重复步骤&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;和&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;，直到gas达到该次交易的上限或者漏洞合约中的   余额用尽。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;这时才会继续往下执行_credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;让攻击合约在漏洞   合约中的存款变为&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;，然后结束合约的执行。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;运行结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行结果&#34;&gt;#&lt;/a&gt; 运行结果&lt;/h4&gt;
&lt;p&gt;​		攻击合约通过重入攻击，窃取了漏洞合约中大量以太币。&lt;/p&gt;
&lt;h2 id=&#34;预防措施&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预防措施&#34;&gt;#&lt;/a&gt; 预防措施&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在合约中，遇到向外部合约转账的情况时，使用 solidity 中内置的 transfer () 函数，而不是 call () 函数。&lt;/p&gt;
&lt;p&gt;transfer () 函数仅会发送 2300 Gas 给用于合约的外部调用，这不足以攻击合约反复重入原合约。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确保所有改变状态变量的逻辑，都发生在以太币被发送出合约（或任何外部调用）之前。&lt;/p&gt;
&lt;p&gt;上面的合约之所以能被重入攻击，很大一部分原因在于漏洞合约在转账时是先转账，再对用户的余额数进行修改，这使得合约在被重入攻击时，用户的余额数一致不变。如果是先修改余额再转账，攻击合约在第一次重入取款函数时，就会因为余额不足而失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入互斥锁，添加一个状态变量，在合约代码执行期间锁定合约，使得代码执行完之前只能有一个线程执行函数，防止函数被重入调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://coldwinds5167.github.io/2021/12/11/Blockchain-profiles/</guid>
            <title>区块链简介</title>
            <link>https://coldwinds5167.github.io/2021/12/11/Blockchain-profiles/</link>
            <category term="Blockchain" scheme="https://coldwinds5167.github.io/tags/Blockchain/" />
            <pubDate>Sat, 11 Dec 2021 19:47:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;区块链简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区块链简介&#34;&gt;#&lt;/a&gt; 区块链简介&lt;/h1&gt;
&lt;h2 id=&#34;概念定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念定义&#34;&gt;#&lt;/a&gt; 概念定义&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;​		区块链是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODglODYlRTUlQjglODMlRTUlQkMlOEYvMTkyNzYyMzI=&#34;&gt;分布式&lt;/span&gt;数据存储、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclODIlQjklRTUlQUYlQjklRTclODIlQjklRTQlQkMlQTAlRTglQkUlOTMvODQ5MTk1Ng==&#34;&gt;点对点传输&lt;/span&gt;、共识机制、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEElQTAlRTUlQUYlODYlRTclQUUlOTclRTYlQjMlOTUvMjgxNjIxMw==&#34;&gt;加密算法&lt;/span&gt;等计算机技术的新型应用模式。区块链（Blockchain），是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQUYlOTQlRTclODklQjklRTUlQjglODEvNDE0MzY5MA==&#34;&gt;比特币&lt;/span&gt;的一个重要概念，它本质上是一个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEUlQkIlRTQlQjglQUQlRTUlQkYlODMlRTUlOEMlOTYvODcxOTUzMg==&#34;&gt;去中心化&lt;/span&gt;的数据库，同时作为&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQUYlOTQlRTclODklQjklRTUlQjglODEvNDE0MzY5MA==&#34;&gt;比特币&lt;/span&gt;的底层技术，是一串使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODYlRTclQTAlODElRTUlQUQlQTYvNDgwMDAx&#34;&gt;密码学&lt;/span&gt;方法相关联产生的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTYlOEQlQUUlRTUlOUQlOTcvMTA3Njcy&#34;&gt;数据块&lt;/span&gt;，每一个数据块中包含了一批次比特币网络交易的信息，用于验证其信息的有效性（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOTglQjIlRTQlQkMlQUEvOTYzODU1MA==&#34;&gt;防伪&lt;/span&gt;）和生成下一个区块。其具有去中心化、不可篡改、全程留痕、可以追溯、集体维护、公开透明等特点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h2&gt;
&lt;h3 id=&#34;去中心化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#去中心化&#34;&gt;#&lt;/a&gt; 去中心化&lt;/h3&gt;
&lt;p&gt;​		在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为暂时的中心，实现点对点的直接连接。&lt;/p&gt;
&lt;h3 id=&#34;不可篡改全程留痕可以追溯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不可篡改全程留痕可以追溯&#34;&gt;#&lt;/a&gt; 不可篡改 / 全程留痕 / 可以追溯&lt;/h3&gt;
&lt;p&gt;​		在区块链中，每一个数据块都通过密码学算法计算和记录一段时间系统内全部信息交流的数据，并依据这些数据生成该数据块的指纹用于连接或生成下一个数据块并检验其信息的有效性。&lt;/p&gt;
&lt;p&gt;​		如果修改一个区块的数据，这个区块便不被其他区块承认，而又因为其&lt;strong&gt;去中心化&lt;/strong&gt;的特点，使得大规模修改区块数据十分困难，达到了&lt;strong&gt;不可篡改&lt;/strong&gt;的效果。&lt;/p&gt;
&lt;p&gt;​		区块链上每一个新区块的生成都包含了旧区块的信息，使得区块链储存了系统全部的历史数据，达到了&lt;strong&gt;全程留痕&lt;/strong&gt;的效果。&lt;/p&gt;
&lt;p&gt;​		区块链中的所有节点在每一个区块上都有一个时间戳，表示这个信息是这个时间写入的。又因其&lt;strong&gt;不可篡改&lt;/strong&gt;的特点，使得区块链上每一条数据都可以通过链式结构追本溯源，验证其存在性，达到了&lt;strong&gt;可以追溯&lt;/strong&gt;的特点。&lt;/p&gt;
&lt;h3 id=&#34;集体维护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集体维护&#34;&gt;#&lt;/a&gt; 集体维护&lt;/h3&gt;
&lt;p&gt;​		因为&lt;strong&gt;去中心化&lt;/strong&gt;，区块链中的数据块由系统中所有具有维护功能的节点来共同维护，同时这些节点是开源的，任何人都可以参与。并且每一个节点在参与记录的同时也来验证其他节点记录结果的正确性，维护效率提高，成本降低。&lt;/p&gt;
&lt;h3 id=&#34;公开透明隐私保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公开透明隐私保护&#34;&gt;#&lt;/a&gt; 公开透明 / 隐私保护&lt;/h3&gt;
&lt;p&gt;​		区块链中储存了系统全部的历史信息交流数据，并且&lt;strong&gt;可以追溯&lt;/strong&gt;，使得区块链中的数据&lt;strong&gt;公开透明&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		存储在区块链上的交易信息是公开的，但是账户身份信息是高度加密的。为了保护区块链中用户的隐私，BTC 通过隔断交易地址和地址持有人真实身份的关联（利用公钥哈希值作为交易标识），来达到匿名的效果，即知道有这笔交易，但不知道由谁交易给谁。但通过观察和跟踪区块链的信息，分析重复使用公钥哈希值和多次重复的 IP 信息，还是可以追查到帐户和交易的关联性，同时进行社工分析，就有可能被找出现实中的身份信息。&lt;/p&gt;
&lt;p&gt;​		为了更好地保护隐私，基于加密算法，主要产生了以下四种加密方案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;混币原理：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjclQjclRTUlQjglODElRTYlOUMlOEQlRTUlOEElQTE=&#34;&gt;https://baike.baidu.com/item/ 混币服务&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;环签名：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOEUlQUYlRTclQUQlQkUlRTUlOTAlOEQ=&#34;&gt;https://baike.baidu.com/item/ 环签名&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;同态加密：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOTAlOEMlRTYlODAlODElRTUlOEElQTAlRTUlQUYlODY=&#34;&gt;https://baike.baidu.com/item/ 同态加密&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;零知识证明（ZKP）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUIlQjYlRTclOUYlQTUlRTglQUYlODYlRTglQUYlODElRTYlOTglOEU=&#34;&gt;https://baike.baidu.com/item/ 零知识证明&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;智能合约&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能合约&#34;&gt;#&lt;/a&gt; 智能合约&lt;/h1&gt;
&lt;h2 id=&#34;概念定义-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念定义-2&#34;&gt;#&lt;/a&gt; 概念定义&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;​		智能合约是一种旨在以信息化方式传播、验证或执行合同的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。&lt;/p&gt;
&lt;p&gt;​		智能合约的目的是提供优于传统合约的安全方法，并减少与合约相关的其他交易成本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数字形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数字形式&#34;&gt;#&lt;/a&gt; 数字形式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数字形式意味着合约不得不写入计算机可读的代码中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		简单来讲，智能合约就是部署在区块链上的代码，而代码的执行则是在代码的执行是在本地的 EVM 中。本地的 EVM 读取了区块链上的代码，并在本地运行后，再将结果写入到区块链中。&lt;/p&gt;
&lt;h2 id=&#34;智能合约的安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能合约的安全&#34;&gt;#&lt;/a&gt; 智能合约的安全&lt;/h2&gt;
&lt;p&gt;​		既然智能合约的本质是能够运行的代码，那么相应的，它也会产生出一系列安全漏洞，并且大部分智能合约是开源的，剩余的小部分，也可以进行反编译，这使得智能合约的漏洞会更容易被找到。&lt;/p&gt;
&lt;p&gt;​		PWN 中的智能合约题，便是利用合约代码中的漏洞，对合约进行攻击，从而达到获取 flag 的目的。&lt;/p&gt;
&lt;p&gt;​		比较经典的攻击有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重入攻击&lt;/li&gt;
&lt;li&gt;整数溢出&lt;/li&gt;
&lt;li&gt;伪随机数回滚攻击&lt;/li&gt;
&lt;li&gt;薅羊毛（Airdrop Hunting）&lt;/li&gt;
&lt;li&gt;短地址攻击&lt;/li&gt;
&lt;li&gt;…………&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
