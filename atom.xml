<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://coldwinds5167.github.io</id>
    <title>冷风喧嚣</title>
    <subtitle>懒狗一只</subtitle>
    <icon>https://coldwinds5167.github.io/images/favicon.ico</icon>
    <link href="https://coldwinds5167.github.io" />
    <author>
      <name>Coldwinds</name>
    </author>
    <updated>2021-12-11T15:45:55.000Z</updated>
    <entry>
        <id>https://coldwinds5167.github.io/2021/12/pwn-reserve-start/</id>
        <title>二进制（pwn、reverse）学习方向</title>
        <link rel="alternate" href="https://coldwinds5167.github.io/2021/12/pwn-reserve-start/"/>
        <content type="html">&lt;h1 id=&#34;0x00-安全素养&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x00-安全素养&#34;&gt;#&lt;/a&gt; 0x00 安全素养&lt;/h1&gt;
&lt;h2 id=&#34;网络安全法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络安全法&#34;&gt;#&lt;/a&gt; 网络安全法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;不要违法，不要违法，不要违法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglQUQlRTUlOEQlOEUlRTQlQkElQkElRTYlQjAlOTElRTUlODUlQjElRTUlOTIlOEMlRTUlOUIlQkQlRTclQkQlOTElRTclQkIlOUMlRTUlQUUlODklRTUlODUlQTglRTYlQjMlOTU=&#34;&gt;https://baike.baidu.com/item/ 中华人民共和国网络安全法&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;0x01-基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x01-基础&#34;&gt;#&lt;/a&gt; 0x01 基础&lt;/h1&gt;
&lt;p&gt;编程和逆向工程的能力是&lt;strong&gt;相当重要&lt;/strong&gt;的。&lt;/p&gt;
&lt;h2 id=&#34;编程语言功底&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程语言功底&#34;&gt;#&lt;/a&gt; 编程语言功底&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;精通 C 语言（指针、函数）、C++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;汇编语言（熟悉常见指令及寄存器等，能够熟练阅读汇编代码）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟练使用 python&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;逆向功底底层原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逆向功底底层原理&#34;&gt;#&lt;/a&gt; 逆向功底 &amp;amp; 底层原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IDA PRO 的使用（或者 Ghidra 等其它工具）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gdb 的基本使用（断点、单步、查看内存等）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;《程序员的自我修养》
&lt;ul&gt;
&lt;li&gt;程序的编译链接原理&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;进程地址空间&lt;/li&gt;
&lt;li&gt;函数调用惯例&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x02-二进制安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0x02-二进制安全&#34;&gt;#&lt;/a&gt; 0x02 &lt;strong&gt;二进制安全&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;ctf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf&#34;&gt;#&lt;/a&gt; CTF&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jdGYtd2lraS5vcmcv&#34;&gt;https://ctf-wiki.org/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先从 CTF 入手，学习各种漏洞类型及利用手法，不断刷题、阅读，大一大二专注在 CTF 比赛中，要求能够解决大部分常规难度的题目。&lt;/p&gt;
&lt;p&gt;学习新的题目时，不要先看 wp，要先自己去找漏洞，找漏洞是最重要的，漏洞的利用上可以跟着 wp 一步一步调试。&lt;/p&gt;
&lt;p&gt;这里有一些刷题平台：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9idXVvai5jbi8=&#34;&gt;https://buuoj.cn/&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jdGYuYnVna3UuY29tLw==&#34;&gt;https://ctf.bugku.com/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3RmaHViLmNvbS8jL2luZGV4&#34;&gt;https://www.ctfhub.com/#/index&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hZHdvcmxkLnhjdGYub3JnLmNuLw==&#34;&gt;https://adworld.xctf.org.cn/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wd25hYmxlLnR3Lw==&#34;&gt;https://pwnable.tw/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pwn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn&#34;&gt;#&lt;/a&gt; PWN&lt;/h3&gt;
&lt;h4 id=&#34;配置环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置环境&#34;&gt;#&lt;/a&gt; 配置环境&lt;/h4&gt;
&lt;p&gt;CTF 中接触到的 PWN 题大多属于 LINUX PWN，给电脑装 LINUX 系统比较麻烦，一般情况下是装虚拟机。&lt;/p&gt;
&lt;p&gt;如果想跳过配置环境这一步，可以直接使用 KALI LINUX，但还是建议自己装一次环境（日后可能会需要下载安装一些工具，需要会 LINUX 系统的操作）。&lt;/p&gt;
&lt;p&gt;可以参考我的另一篇文章：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;Coldwinds&#34; style=&#34;--block-color:#9d5b8b;&#34;&gt;&lt;a href=&#34;https://coldwinds5167.github.io/2021/12/pwn-environment/&#34; class=&#34;image&#34; data-background-image=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/avatar.jpg&#34;&gt;&lt;/a&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;a href=&#34;https://coldwinds5167.github.io/2021/12/pwn-environment/&#34; class=&#34;title&#34;&gt;冷风喧嚣&lt;/a&gt;
          &lt;p class=&#34;desc&#34;&gt;pwn环境搭建&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h4 id=&#34;基本工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本工具&#34;&gt;#&lt;/a&gt; 基本工具&lt;/h4&gt;
&lt;h5 id=&#34;逆向辅助类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逆向辅助类&#34;&gt;#&lt;/a&gt; 逆向辅助类&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IDA PRO&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IDA PRO 是一款很好用的反汇编工具，其反编译插件在很多时候能够将代码还原到接近源码的水平，但是 IDA 的使用比较复杂，需要自己学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVpOOEtkMlFicG5QNXFtMVFCZnhhSUE=&#34;&gt;https://pan.baidu.com/s/1ZN8Kd2QbpnP5qm1QBfxaIA&lt;/span&gt;&lt;br /&gt;
 提取码：j2my&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GDB&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GDB 是一款功能强大的程序调试工具，是动态调试必不可少的工具，可以很方便的查看堆中链表的状态，各个地址的内容。GDB 拥有多个插件（peda、pwndbg、gef 等）这些插件提供了一些额外的命令，在可视化和功能上都进行了扩展。&lt;/p&gt;
&lt;p&gt;推荐安装一个插件即可，多个插件的切换与系统环境变量相关，自行百度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;漏洞利用类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞利用类&#34;&gt;#&lt;/a&gt; 漏洞利用类&lt;/h5&gt;
&lt;p&gt;这一类工具几乎都可以在&lt;strong&gt; GITHUB&lt;/strong&gt; 上下载。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pwntools&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pwntools 是一个 CTF 框架和漏洞利用开发库，涵盖了 pwn 题利用脚本所需要的各种工具。包括方便的 IO 交互函数，ROP、格式化字符串等利用的自动化工具，shellcode 生成器等等，是目前最好用也是仅有的大型 pwn 利用框架。能节省大量编写脚本的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZIO&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZIO 是一个专门为 CTF PWN 开发的 Python 库，基于 ZIO 可以方便实现对远程服务器上的服务程序进行数据读写操作，也支持对本地程序的数据读写操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ROPgadget&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ROP 是一种高级的内存攻击技术，常用来绕过现代操作系统的各种通用防御。Ropgadget 用于找寻程序中用来组装 ROP 链的 gadget。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;checksec&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查询程序架构和保护机制的开启状况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;one_gadget&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析定位 libc 中获取 shell 的地址，在满足特定条件的情况下，仅拥有该地址就可以 get shell。而非手动输入 /bin/sh 和 system 的地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;seccomp-tools&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析程序中的 seccomp 安全机制开启的具体情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;保护机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#保护机制&#34;&gt;#&lt;/a&gt; 保护机制&lt;/h4&gt;
&lt;h5 id=&#34;系统选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统选项&#34;&gt;#&lt;/a&gt; 系统选项&lt;/h5&gt;
&lt;p&gt;ASLR：地址空间随机化 (系统选项)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ASLR 有三个等级，对应系统文件中的三个值。&lt;/p&gt;
&lt;p&gt;0：关闭 ASLR。&lt;/p&gt;
&lt;p&gt;1：mmap base、stack、vdso page 将随机化，“.so” 文件会被加载到随机地址，程序的代码段加载地址将被随机化。&lt;/p&gt;
&lt;p&gt;2：在 1 的基础上增加了 heap 随机化。&lt;/p&gt;
&lt;p&gt;ASLR 保证每次程序加载的时候自身和所加载的库文件都会被映射到虚拟地址空间的不同地址处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;编译选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译选项&#34;&gt;#&lt;/a&gt; 编译选项&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NX：堆栈不可执行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要防止程序直接在非可执行的内存区（堆和栈）上运行 shellcode 代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PIE：程序基地址随机化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序每个段加载出来的基地址都是随机化的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RELRO：重定位&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般分为 partial relro 和 full relro 两种情况，前者重定位信息可写（如 GOT 表），后者不可写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STACK CANARY：栈溢出保护&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在栈的缓冲区和控制信息（如 EBP 等）间插入一个 canary word。这样，当缓冲区被溢出时，在返回地址被覆盖之前 canary word 会首先被覆盖。通过检查 canary word 的值是否被修改，就可以判断是否发生了溢出攻击，从而保护程序因为栈溢出而被攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见漏洞&#34;&gt;#&lt;/a&gt; 常见漏洞&lt;/h4&gt;
&lt;h5 id=&#34;栈相关漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈相关漏洞&#34;&gt;#&lt;/a&gt; 栈相关漏洞&lt;/h5&gt;
&lt;p&gt;学习栈相关漏洞首先要对程序&lt;strong&gt;栈的结构&lt;/strong&gt;，&lt;strong&gt;调用机制&lt;/strong&gt;，以及函数参数传递规则（函数参数入栈出栈顺序）有一定了解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;栈溢出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指栈上的缓冲区被填入了过多的数据，超出了边界，从而导致栈上原有的数据被覆盖，如果能让指定内容覆盖到某些位置，就能 get shell，通常覆盖栈的&lt;strong&gt;局部变量&lt;/strong&gt;、&lt;strong&gt;bp&lt;/strong&gt;（函数栈栈底指针）、&lt;strong&gt;ip&lt;/strong&gt;（程序返回地址）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于栈溢出有几个需要学习的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当开启 NX 和 CANARY 后如何执行栈溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;覆盖 ip：ip 存放的是返回到父函数调用处的下一个位置，如果通过栈缓冲区用某一地址 a 覆盖了 ip，在该函数结束后，会跳转到 a 地址上，从而劫持控制流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;覆盖栈中存储的临时变量：在知道两个变量地址偏移时，可以通过一个变量覆盖另一个变良，从而改变另一个变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关注一些敏感函数：这些函数能够产生缓冲区溢出，从而实现栈溢出。&lt;/p&gt;
&lt;p&gt;常见的漏洞函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gets(buff)&lt;/li&gt;
&lt;li&gt;scanf(&amp;quot;%s&amp;quot;,buff)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;潜在的漏洞函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read&lt;/li&gt;
&lt;li&gt;strcpy&lt;/li&gt;
&lt;li&gt;memcpy&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;栈相关漏洞的利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈相关漏洞的利用&#34;&gt;#&lt;/a&gt; 栈相关漏洞的利用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;栈的特殊利用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libc 信息泄露：main 函数栈底存放了返回地址，如果能泄露改返回地址，就能计算出 libc 的基址，从而得到其他函数地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 libc 泄露栈地址：在已知 libc 地址的情况下，可以根据 libc 中的 Environ 偏移来计算栈的偏移，从而计算出栈的地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;往栈上写 ROP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环境变量修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多级指针&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈喷射&lt;/p&gt;
&lt;p&gt;在 ROP 时无法找到确定的栈地址，便预先在栈中布置大量重复的 ROP 数据块，只要在返回时位于其中一个数据块就能实现 ROP。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;并非必须是 ROP，shellcode、ROP 地址等数据也可以利用栈喷射。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈迁移&lt;/p&gt;
&lt;p&gt;溢出的长度太短，尝试改变 sp 和 bp 寄存器的值，在新一段地址上建立栈并写入 rop 链&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程栈&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现阶段了解一下即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;堆相关漏洞堆漏洞是ctf比赛重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆相关漏洞堆漏洞是ctf比赛重点&#34;&gt;#&lt;/a&gt; 堆相关漏洞（堆漏洞是 CTF 比赛重点）&lt;/h5&gt;
&lt;p&gt;堆主要指用户动态申请的内存（如调用 malloc、alloc、alloca 等函数）。&lt;/p&gt;
&lt;p&gt;学习堆相关漏洞需要了解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;堆基本数据结构 chunk&lt;/strong&gt;（alloced chunk、free chunk、top chunk）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆空闲块管理结构 bin&lt;/strong&gt;（fast bin、unsorted bin、small bin、large bin）。&lt;/p&gt;
&lt;p&gt;malloc、free 函数的基本规则，建议结合源码对照分析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tcache&lt;/strong&gt; 机制（很重要）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常规堆溢出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与栈溢出类似，在堆上的缓冲区被填入了过多的数据，超出了边界，导致堆中原有的数据被覆盖。通常有以下两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;覆盖本堆块内部数据：通常发生在结构体内部，如结构体中数组溢出，就会覆盖后续变量。&lt;/li&gt;
&lt;li&gt;覆盖后续堆块数据：不仅影响后续堆块的数据，还破坏了堆块的结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种情况，参照栈溢出即可。&lt;/p&gt;
&lt;p&gt;第二种情况，有其他利用方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Off By One&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相比于常规的堆溢出，Off By One 只能溢出一字节，在 CTF 比赛中，Off By One 通常位于堆块末尾，溢出的一字节恰好能够覆盖下一堆块的 size 域的最低位，Off By One 本身比较难以利用，通常用来触发 Unlink。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use After Free（UAF）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UAF 即释放后使用漏洞，当堆指针在释放后为被置 NULL，就会形成悬挂指针，在下一次访问该指针时，仍然能够访问到原指针所指向的堆内容。UAF 的利用需要具体问题具体分析，来确定其是否能泄露信息或修改信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Double Free&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Double Free 主要指对指针存在多次释放的情况，算是 UAF 中比较特殊的一种，针对用于释放堆块的函数。对此释放能够使堆块发生重叠，前后申请的堆块可能会指向同一块内存。还可以构造特殊的堆结构，从而运用针对堆结构的利用方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO_FILE&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IO_FILE 本身并不是漏洞，而是程序执行 fopen 等函数时创建的结构体。在出现 House Of Orange 后，陆续出现了利用 IO_FILE 进行攻击的手法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FSOP&lt;/li&gt;
&lt;li&gt;Vtable 劫持&lt;/li&gt;
&lt;li&gt;利用缓冲区指针达成任意读写&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;堆相关漏洞的利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆相关漏洞的利用&#34;&gt;#&lt;/a&gt; 堆相关漏洞的利用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unlink&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlink 是把 free 掉的堆块从所属的 bins 链中，卸下来的操作。它是在 free 掉一块 chunk (除 fastbin 的 chunk 外）之后，glibc 检查这块 chunk 相邻的上下两块 chunk 的 free 状态之后，做出的堆块合并引起的。&lt;/p&gt;
&lt;p&gt;Unlink 攻击指的是先伪造堆块，在 free 操作时触发堆块合并，在绕过一系列检测机制后，就可以通过伪造的堆块修改其他堆块的指针，或者实现任意地址写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fastbin Attack&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fastbin Attack 主要针对 fastbin 的使用和释放机制，对 fastbin 的间接利用比较多。&lt;/p&gt;
&lt;p&gt;直接利用 fastbin 的方法主要是针对 fastbin 的单链表结构，更改其后续指针，控制 fastbin 在下次所要分配的堆块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;House Of Orange&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Unsorted Bin Attack 修改 IO_list_all 来获取 shell。&lt;/p&gt;
&lt;p&gt;学习 House Of Orange 需要理解两个概念 ——Unsorted Bin Attack 和 FSOP。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Large bin attack&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;覆盖 largebin 中 bk_nextsize 指针，在 largebin 插入 unsorted bin 时，可以做到往任意地址写一个堆地址的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆喷射&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;堆喷射主要指在堆块中布置好大量重复性的数据，便于目的地址索引到堆上的数据，与栈喷射相似但更为麻烦，在真实漏洞中利用较多，而在 CTF 比赛中不常出现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;格式化字符串漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串漏洞&#34;&gt;#&lt;/a&gt; 格式化字符串漏洞&lt;/h5&gt;
&lt;p&gt;格式化字符串漏洞主要是针对一些格式化函数（printf、sprintf、vsprintf 等）。这些格式化函数利用格式化字符串来指定串的格式。下面给出四个比较关键的格式符：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;% x（% lx）：替换为参数的值（十六进制）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;% p：替换为参数的值（指针形式）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;% s：替换为参数所指向内存的字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;% n：将格式化串中该特殊字符之前的字符数量写入参数中（获取地址的参数）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时还要了解参数定位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：printf (&amp;quot;% p,% x&amp;quot;,&amp;amp;a,&amp;amp;b);  其中的 % p 和 % x 对应第 1、2 个参数。&lt;/p&gt;
&lt;p&gt;也可以使用 &amp;quot;% d$m&amp;quot; 的形式来定位参数列表中第 d 个参数（从 1 开始）；其中 m 是前面所说的格式符（x、p、s、n 等）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;格式化字符串的利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串的利用&#34;&gt;#&lt;/a&gt; 格式化字符串的利用&lt;/h5&gt;
&lt;p&gt;格式化函数遇到格式符的关键字符后，会按照传参规则去寻找参数来进行替换或修改。如果实际参数数量小于所需参数数量，依然会将对应位置的数值当成参数进行转换，从而触发格式化字符串漏洞。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;任意地址读&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过前面所说的参数定位 “% d$m”，在确定所需信息在栈中的位置（位于第几个参数），通过参数定位可以将该信息泄露出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任意地址写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是利用格式化字符串中的 % n 对参数进行写入，写入的值是格式化字符串中 % n 之前的字符数量。&lt;/p&gt;
&lt;p&gt;% n 修改 4 字节、% hn 修改 2 字节、% hhn 修改 1 字节。&lt;/p&gt;
&lt;p&gt;可以结合 % c 来修改成特定的值，例如 &amp;quot;%100c&amp;quot; 会替换为宽度为 100 的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;整型漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整型漏洞&#34;&gt;#&lt;/a&gt; 整型漏洞&lt;/h5&gt;
&lt;p&gt;整型漏洞主要指发生在整型数据上的漏洞，整型溢出指试图保存的数据超过整型数据的宽度时发生的溢出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;宽度溢出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;整型数据在计算机中的存储一般按字节进行存储，不同的整型数据所需要的字节数也不同，“所需要的字节数” 就是该整型数据的宽度，如果数据所要表达的值大于这个宽度就会发生宽度溢出。&lt;/p&gt;
&lt;p&gt;宽度溢出主要出现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;整型数据运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整型数据赋值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号转换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;符号转化通常用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将无符号数和有符号数进行强制转换后数值相差过大，从而绕过条件判断。&lt;/li&gt;
&lt;li&gt;有些函数对参数有特定要求，但使用时并没有严格按照参数的类型进行参数传递。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组越界&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于检查不严格，导致在对数组内存的索引时超出了数组的预设范围，从而访问到其他数据。&lt;/p&gt;
&lt;p&gt;如果可以显示数组内容，就可以实现信息泄露；如果可以修改数组内容，就可以实现信息修改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;逻辑漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑漏洞&#34;&gt;#&lt;/a&gt; 逻辑漏洞&lt;/h5&gt;
&lt;p&gt;逻辑漏洞主要指程序逻辑上出现的问题，当程序逻辑不严密或者逻辑太复杂，就会导致一些逻辑分支不能正常处理或处理错误。在 PWN 题中较少出现，主要是竞态条件漏洞。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;竞态条件漏洞&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;竞态条件漏洞是指多任务（多进程、多线程等）对同一资源进行访问时，因访问资源的先后顺序不同产生冲突的情况，通过竞态条件漏洞可以实现越权访问、资源篡改等操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;其他平台漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他平台漏洞&#34;&gt;#&lt;/a&gt; 其他平台漏洞&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;IOT 漏洞&lt;/li&gt;
&lt;li&gt;虚拟机漏洞&lt;/li&gt;
&lt;li&gt;内核漏洞&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reverse&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reverse&#34;&gt;#&lt;/a&gt; REVERSE&lt;/h3&gt;
&lt;p&gt;Reverse 即软件逆向工程，是对编译成型的二进制程序进行代码、逻辑和功能分析的过程。在 CTF 中主要考察软件静态分析和动态调试能力，常见的逆向目标为 Windows、Linux 平台下 x86、x64 二进制可执行程序。&lt;/p&gt;
&lt;h4 id=&#34;能力要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#能力要求&#34;&gt;#&lt;/a&gt; 能力要求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;熟悉如操作系统，汇编语言，加解密等相关知识。&lt;/li&gt;
&lt;li&gt;具有丰富的多种高级语言的编程经验。&lt;/li&gt;
&lt;li&gt;熟悉多种编译器的编译原理。&lt;/li&gt;
&lt;li&gt;较强的程序理解和逆向分析能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;逆向分析的主要方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逆向分析的主要方法&#34;&gt;#&lt;/a&gt; 逆向分析的主要方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态分析法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;静态分析法是在不执行代码文件的情况下，对代码进行静态分析的一种方法，主要观察代码文件的外部特性，包括文件类型分析和静态反汇编、反编译。通常使用反汇编工具查看内部代码，分析代码结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态分析法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态分析法是在程序文件的执行过程中对代码进行动态分析的一种方法，其通过调试来分析代码、获取内存的状态等，目的在于定位关键代码后，在程序运行的过程中，借由输出信息（寄存器，内存变化，程序输出）等来验证自己的推断或是理解程序功能。通常使用调试器来分析程序的内部结构和实现原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;汇编指令体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#汇编指令体系结构&#34;&gt;#&lt;/a&gt; 汇编指令体系结构&lt;/h4&gt;
&lt;p&gt;逆向分析的程序所使用的处理器架构通常为 Intel 架构，所以需要对 Intel x86 和 x64 指令体系有所了解，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x86 指令体系下：
&lt;ul&gt;
&lt;li&gt;寄存器组&lt;/li&gt;
&lt;li&gt;汇编指令集
&lt;ul&gt;
&lt;li&gt;数据传送类指令&lt;/li&gt;
&lt;li&gt;栈操作与函数调用&lt;/li&gt;
&lt;li&gt;算数、逻辑运算指令&lt;/li&gt;
&lt;li&gt;控制转移指令&lt;/li&gt;
&lt;li&gt;特殊指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;x86 应用程序二进制接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;x64 指令体系下与 x86 指令体系相似，这里主要标注&lt;strong&gt;不同点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;寄存器组&lt;/li&gt;
&lt;li&gt;系统调用指令&lt;/li&gt;
&lt;li&gt;x64 应用程序二进制接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本工具-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本工具-2&#34;&gt;#&lt;/a&gt; 基本工具&lt;/h4&gt;
&lt;h5 id=&#34;反汇编和反编译工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反汇编和反编译工具&#34;&gt;#&lt;/a&gt; 反汇编和反编译工具&lt;/h5&gt;
&lt;p&gt;反汇编工具有很多，但最推荐的是&lt;strong&gt; IDA PRO&lt;/strong&gt;，在反编译方面，IDA 自带的 Hex-Ray 反编译插件也是最好的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IDA 的使用比较复杂，需要自己学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVpOOEtkMlFicG5QNXFtMVFCZnhhSUE=&#34;&gt;https://pan.baidu.com/s/1ZN8Kd2QbpnP5qm1QBfxaIA&lt;/span&gt;&lt;br /&gt;
 提取码：j2my&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;调试工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调试工具&#34;&gt;#&lt;/a&gt; 调试工具&lt;/h5&gt;
&lt;p&gt;调试工具有以下两个重要功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;断点设置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;允许用户选在程序中任意位置的某行代码，一旦程序运行到这一行，将知识调试工具停止运行程序，并显示程序的当前状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码跟踪（单步调试）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;允许用户在程序运行时跟踪他的执行，程序每执行一条汇编代码后都会暂停，允许用户观察甚至改变程序的状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;调试工具主要根据操作系统来选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows——&lt;strong&gt;Ollydbg&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ollydbg 是 Windows 下一款具有可视化界面的用户态调试工具，推荐从吾爱破解论坛上下载吾爱破解专用版 Ollydbg，这个版本有对抗反调试的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux——&lt;strong&gt;GDB&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GDB 是一款功能强大的程序调试工具，是动态调试必不可少的工具，可以很方便的查看堆中链表的状态，各个地址的内容。GDB 拥有多个插件（peda、pwndbg、gef 等）这些插件提供了一些额外的命令，在可视化和功能上都进行了扩展。&lt;/p&gt;
&lt;p&gt;推荐安装一个插件即可，多个插件的切换与系统环境变量相关，自行百度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;trace类工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trace类工具&#34;&gt;#&lt;/a&gt; Trace 类工具&lt;/h4&gt;
&lt;p&gt;Trace 类工具通过一定的方式监控并记录程序的运行，然后使分析者在记录的信息中得到程序的一些动态信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strace&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Strace 使 Linux 下一个用来跟踪系统调用的工具，可以监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Qira&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Qira 是一个强大的 Trace 类工具，可以将程序整个执行流全部记录下来，然后给予用户&lt;strong&gt;回溯&lt;/strong&gt;、查看命中断点的所有指令（即交叉引用）等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Qira 的安装比较难，多多百度 / 谷歌。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常规逆向分析流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常规逆向分析流程&#34;&gt;#&lt;/a&gt; 常规逆向分析流程&lt;/h4&gt;
&lt;h5 id=&#34;1-收集信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-收集信息&#34;&gt;#&lt;/a&gt; 1、收集信息&lt;/h5&gt;
&lt;p&gt;使用 strings/file/binwalk/IDA 等静态分析工具收集信息，并根据这些静态信息进行 google/github 搜索&lt;/p&gt;
&lt;h5 id=&#34;2-干扰分析技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-干扰分析技术&#34;&gt;#&lt;/a&gt; 2、干扰分析技术&lt;/h5&gt;
&lt;p&gt;程序为了保护代码，通常会使用一系列技术来干扰逆向分析，这里会介绍一些常见的干扰分析技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;花指令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;花指令是代码保护中一种简单的技巧，原理是在原始代码中插入一段无用的或者能够干扰反汇编引擎的代码。花指令主要影响静态分析，在 IDA 中表现为一些指令无法识别，导致某些函数未能识别，从而无法对这些函数进行反编译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;要破解花指令，可以在 IDA 中手动将花指令 patch 成 nop 空指令，从而去除花指令。如果程序中花指令较多，可以通过分析花指令的特定模式，编写 IDAPython 脚本对花指令进行自动化搜索和 patch。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反调试&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反调试技术是指程序在运行时会检测其是否处于被调试状态，如果发现其正在被调试，就无法正常运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 下通过 Ollydbg 的 StringOD 插件可以过滤掉大多数的反调试方法。&lt;/p&gt;
&lt;p&gt;Liunx 下主要利用 ptrace 系统调用、proc 文件系统检测和父进程检测来检测自身是否正在被调试，针对这些反调试方法，常用的方法就是定位到反调试的代码，然后对程序进行 patch，在不影响程序正常功能的情况下，跳过对调试器的检测代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加壳&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加壳是指在二进制的程序中植入一段代码。在运行的时候优先取得程序的控制权，这段代码会在执行的过程中对原始指令进行解密还原，之后再将控制权交还给原始代码，执行原来的代码。&lt;/p&gt;
&lt;p&gt;被加过壳的程序，其真正的代码是加密存放在二进制文件中的，只有在执行时才从内存中解密还原出来，因此没法对加了壳的程序直接进行静态分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在 CTF 比赛中出现的带壳程序通常为已知的壳，大部分都可以通过使用专用工具或者脚本的脱壳。&lt;/p&gt;
&lt;p&gt;可以使用 PEiD 工具查询该带壳程序用的什么壳，再用对应工具或脚本脱壳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制流混淆&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于控制流混淆的程序，没有办法直接进行静态分析，也无法进行反编译，而调试器调试也会陷入控制流的跳转混乱中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于控制流混淆的程序，通常通过 Trace 工具记录下程序运行的所有指令，然后再运行这些指令的基础上进行数据流分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双进程保护（Debug Blocker）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;双进程保护是一种在调试模式下运行自身程序的方法。这种保护通常存在两个进程，由父进程调试子进程。实际功能的代码运行在子进程中，但是因为子进程已经处于调试状态，无法再使用其他调试器进行附加操作。同时父进程能够控制子进程，通过处理子进程的异常，可以控制子进程正常运行。&lt;/p&gt;
&lt;p&gt;双进程保护技术的难点在于，真正的功能运行在子进程中，若要调试子进程，就需要断开其与父进程之间的链接，但是一旦断开，没有父进程处理子进程的异常，会导致子进程无法正常运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于双进程保护的程序，其父进程通常功能单一，因此先针对父进程，了解其处理子进程异常的逻辑，然后调试子程序，使其脱离父进程之后仍能正常运行，最后在对子进程进行调试分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3-关键代码定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-关键代码定位&#34;&gt;#&lt;/a&gt; 3、关键代码定位&lt;/h5&gt;
&lt;p&gt;在一个可执行程序中，汇编代码数量庞大，所以要能够定位出真正需要分析的关键代码，只有找到关键代码之后，才能对关键代码采用的算法进行分析，理清程序功能，最后针对程序功能，写出对应脚本，解出 flag。&lt;/p&gt;
&lt;p&gt;这里给出 3 个常用的关键代码定位法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API 断点法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：在获取文本输入时，窗口类程序获取文本的方式主要是通过 GetWindowsText 和 GetDlgItemText 两个 API 来获取。在输出结果时，会弹出对话框，这时调用的 API 通常为 MessageBox。在这些 API 函数中下断点，在调试工具中断下来后，通过栈回溯即可定位到关键代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串检索法&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 IDA 中&lt;/p&gt;
&lt;p&gt;打开 Strings 子窗口，通过 Ctrl+F 输入想要查找的字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Ollydbg 中&lt;/p&gt;
&lt;p&gt;通过 Alt+E，可以查看可执行模块，找到主模块，点击右键，选择中文搜索引擎，根据需要搜索 ASCII 或者 UNICODE。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;辅助工具定位法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;针对特定语言或编译器生成的程序，可以用一些辅助工具帮助快速定位案件处理程序的地址。&lt;/p&gt;
&lt;p&gt;如：针对 MFC 程序的 xspy，针对 Delphi 程序的 Dede。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;4-常见加密算法识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-常见加密算法识别&#34;&gt;#&lt;/a&gt; 4、常见加密算法识别&lt;/h5&gt;
&lt;p&gt;在对数据进行变换时，通常会使用一些常用的加密算法，如果能够快速识别出对应的加密算法，就能更快的分析出整个完整的算法，下面给出 CTF 比赛中常用的几种加密算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;base64&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;base64 将输入中的每 3 字节（24 比特）按每 6 比特分成一组，编程 4 个小于 64 的索引值，然后通过一个索引表得到 4 个可见字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;索引表为一个 64 字节的字符串：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;“ABCDEFGHIJKLMNOPQRSTUVMXYZabcdefghijklmnopqrstuvwxyz0123456789&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;”&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;如果在代码中发现引用了这个索引表，基本可以确定是 base64。此外，还有一些变种的 base64，主要是改变了索引表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TEA&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TEA 算法是一种常见的分组加密算法，密钥为 128 比特位，明文为 64 比特位，主要做了 32 轮变换，每轮变换都涉及移位和变换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在 TEA 算法中有一个固定的常数 0x9e3779b9 或者 0x61x88647。&lt;/p&gt;
&lt;p&gt;如果在加密函数中发现了这个常数，基本可以确定是 TEA。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AES&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AES 是一种常见的分组加密算法，加密过程涉及 4 种操作：字节替代、行移位、列混淆、轮密钥加。其中字节替代过程是通过 S 盒完成一个字节到另一个字节的映射。（S 盒的结构自行百度）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果发现程序中有 S 盒或者动态生成了 S 盒，基本可以确定是 AES。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RC4&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RC4 算法属于流加密算法，包括初始化函数和加解密函数。其中初始化代码对某一字符数组进行了初始化赋值，且赋值分别递增，之后又对数组进行了 256 次交换操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通过识别初始化代码，可以判断是否为 RC4。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MD5&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MD5 信息摘要算法，是一种广泛使用的密码散列函数，会产生一个 128 位（16 字节）的散列值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;MD5 加密算法中有个初始化函数 MD5Init ()，会初始化四个 MD5 链接变量的整型参数。分别为 0x67452301、0xefcdab89、0x98badcfe、0x10325476，当看到这四个常数，就可以怀疑是 MD5。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5-求解flag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-求解flag&#34;&gt;#&lt;/a&gt; 5、求解 flag&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接从内存获取&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一些比较简单的题目可以直接查看内存来获取 flag，这种题目只需要在特定的地方下断点，然后查看内存即可获得 flag。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对算法进行逆变换操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这类题目要根据程序的输出结果，再分析程序的加密算法，然后编写出对应的逆算法得到 flag。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线性变换的求解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果加密算法是一个线性变换，output 的第 i 位只能由 input 的第 i 位决定，通过获取 input [i] 的所有可能输入对应的输出 output [i]，即可求出 input [i]，对于这种变换，可以进行单字符爆破。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;约束求解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果在 output=convert (input) 之后，需要 output 满足多个约束条件，这种情况下就属于约束求解。&lt;/p&gt;
&lt;p&gt;通常会用到的约束求解器为 z3。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;使用 strings/file/binwalk/IDA 等静态分析工具收集信息，并根据这些静态信息进行 google/github 搜索。&lt;/li&gt;
&lt;li&gt;研究程序的保护方法，如代码混淆，保护壳及反调试等技术，并设法破除或绕过保护。&lt;/li&gt;
&lt;li&gt;反汇编目标软件，快速定位到关键代码进行分析。&lt;/li&gt;
&lt;li&gt;结合动态调试，验证自己的初期猜想，在分析的过程中理清程序功能。&lt;/li&gt;
&lt;li&gt;针对程序功能，写出对应脚本，求解出 flag。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实战进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实战进阶&#34;&gt;#&lt;/a&gt; 实战 &amp;amp; 进阶&lt;/h2&gt;
&lt;p&gt;一般情况下，大一、大二通过 CTF 比赛学习相应技术，大三开始接触实战。&lt;/p&gt;
&lt;p&gt;根据自己的积累和兴趣，可选取一个方向去深入，例如文件媒体解析类、内核、浏览器内核、IOT、移动端等等。&lt;/p&gt;
&lt;p&gt;下面是一些实战 &amp;amp; 进阶 &amp;amp; 提升的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;复现漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习漏洞挖掘技术（fuzz)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关注顶会议题，尝试寻找攻击面去实践漏洞挖掘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blcak hat&lt;/li&gt;
&lt;li&gt;poc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全研究漏洞分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;甲方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对内漏洞挖掘&lt;/li&gt;
&lt;li&gt;安全攻防&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;病毒分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纯逆向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动安全、安全加固（移动端)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游戏安全&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="pwn" scheme="https://coldwinds5167.github.io/tags/pwn/" />
        <category term="reserve" scheme="https://coldwinds5167.github.io/tags/reserve/" />
        <updated>2021-12-11T15:45:55.000Z</updated>
    </entry>
    <entry>
        <id>https://coldwinds5167.github.io/2021/12/pwn-environment/</id>
        <title>pwn环境搭建</title>
        <link rel="alternate" href="https://coldwinds5167.github.io/2021/12/pwn-environment/"/>
        <content type="html">&lt;h2 id=&#34;环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境搭建&#34;&gt;#&lt;/a&gt; 环境搭建&lt;/h2&gt;
&lt;h3 id=&#34;虚拟机安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟机安装&#34;&gt;#&lt;/a&gt; 虚拟机安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 VMware Workstation PRO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 Ubuntu 镜像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91YnVudHUuY29tL2Rvd25sb2FkL2Rlc2t0b3A=&#34;&gt;https://ubuntu.com/download/desktop&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;多个版本，选择 Ubuntu 20.04.3 LTS 即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 VMware Workstation PRO，选择创建新的虚拟机。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%851.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选择下载的 Ubuntu 镜像&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%852.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输入用户名和密码（自定）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%853.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;设置虚拟机安装位置（一般在 D 盘新建一个文件夹专门放虚拟机）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%854.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;后面全部性能设置默认就好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完成后，输入之前设置的密码登录，弹窗全部跳过即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;虚拟机配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟机配置&#34;&gt;#&lt;/a&gt; 虚拟机配置&lt;/h3&gt;
&lt;h4 id=&#34;1换源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1换源&#34;&gt;#&lt;/a&gt; 1. 换源&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 Ubuntu 初始源在美国，从国内访问比较慢，所以这里换成清华源（阿里源）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先备份一下原文件：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /etc/apt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; sources.list sources.list.bak&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑 sources.list&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; gedit sources.list&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将其中的内容替换为如下内容：(20.04LTS 清华源)&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;(20.04LTS 阿里源)&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#deb-src &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal main restricted universe multiverse&lt;br /&gt;
deb &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-security main restricted universe multiverse&lt;br /&gt;
#deb-src &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-security main restricted universe multiverse&lt;br /&gt;
deb &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-updates main restricted universe multiverse&lt;br /&gt;
#deb-src &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-updates main restricted universe multiverse&lt;br /&gt;
deb &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-proposed main restricted universe multiverse&lt;br /&gt;
#deb-src &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-proposed main restricted universe multiverse&lt;br /&gt;
deb &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-backports main restricted universe multiverse&lt;br /&gt;
#deb-src &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS91YnVudHUv&#34;&gt;http://mirrors.aliyun.com/ubuntu/&lt;/span&gt; focal-backports main restricted universe multiverse&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* 更新一下源和已安装的软件包

  ```bash
  sudo apt update
  sudo apt upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2必备软件安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2必备软件安装&#34;&gt;#&lt;/a&gt; 2. 必备软件安装&lt;/h4&gt;
&lt;h5 id=&#34;pip3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pip3&#34;&gt;#&lt;/a&gt; Pip3&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 包管理工具，很重要。&lt;/p&gt;
&lt;p&gt;Ubuntu20 默认安装 python3，故安装 pip3。&lt;/p&gt;
&lt;p&gt;安装后 pip/pip3 都可以使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; python3-pip&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt; Git&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;git 的功能是拷贝一个 git 仓库到本地，通常用来下载 Github 上的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;Github 有时候连接不上，这里改一下 host。&lt;/p&gt;
&lt;p&gt;在网站 www.ipaddress.com 查找下面两个域名对应的 ip&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;github.global.ssl.fastly.net&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;github.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后修改 host 文件&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; gedit /etc/hosts&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/githost.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;保存后重启虚拟机即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;vim&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim&#34;&gt;#&lt;/a&gt; Vim&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;文本编辑器，功能很强大，具体使用需要自己下去学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;pwntools&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwntools&#34;&gt;#&lt;/a&gt; Pwntools&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;pwntools 是一个 CTF 框架和漏洞利用开发库，涵盖了 pwn 题利用脚本所需要的各种工具。包括方便的 IO 交互函数，ROP、格式化字符串等利用的自动化工具，shellcode 生成器等等，是目前最好用也是仅有的大型 pwn 利用框架。能节省大量编写脚本的时间。&lt;/p&gt;
&lt;p&gt;极其重要！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python3-dev &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; libssl-dev libffi-dev build-essential&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; python3 -m pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; --upgrade pip&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; python3 -m pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; --upgrade pwntools&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;32位依赖库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32位依赖库&#34;&gt;#&lt;/a&gt; 32 位依赖库&lt;/h5&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; lib32ncurses5-dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; lib32z1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;pwndbgpedagef&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwndbgpedagef&#34;&gt;#&lt;/a&gt; Pwndbg/Peda/Gef&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;GDB 是一款功能强大的程序调试工具，是动态调试必不可少的工具，可以很方便的查看堆中链表的状态，各个地址的内容。GDB 拥有多个插件（peda、pwndbg、gef 等）这些插件提供了一些额外的命令，在可视化和功能上都进行了扩展。&lt;/p&gt;
&lt;p&gt;推荐安装一个插件即可，多个插件的切换与系统环境变量相关，自行百度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Pwndbg&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/pwndbg/pwndbg&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; pwndbg&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./setup.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;Peda&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/longld/peda.git~/peda&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;source ~/peda/peda.py&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; ~/.gdbinit&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;Gef&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; -q -O-https://github.com/hugsy/gef/raw/master/scripts/gef.sh&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sh&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;Pwndbg/Peda/Gef 插件可以自由切换，&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; gedit ~/.gdbinit&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打开 gdb 环境变量路径文件&lt;/p&gt;
&lt;p&gt;以使用 pwndbg 为例：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; /home/coldwinds/pwndbg/gdbinit.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#source ~/peda/peda.py&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要使用哪一个插件，在其他插件前面加上 &lt;code&gt;#&lt;/code&gt; 注释即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3实用软件安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3实用软件安装&#34;&gt;#&lt;/a&gt; 3. 实用软件安装&lt;/h4&gt;
&lt;h5 id=&#34;rop-garget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rop-garget&#34;&gt;#&lt;/a&gt; ROP-garget&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;用来查找程序中一些指令的地址，64 位程序中运用较多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pip3 &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; capstone&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/JonathanSalwan/ROPgadget.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; ROPgadget&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; python3 setup.py &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;one_gadget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#one_gadget&#34;&gt;#&lt;/a&gt; One_gadget&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;可以找到 libc 中的 execve (&#39;/bin/sh&#39;, NULL, NULL)，在构造其他条件后，利用一个 Gadget 就可以 GetShell。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; ruby&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; gem&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; gem &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; one_gadget&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;libcsearcher&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#libcsearcher&#34;&gt;#&lt;/a&gt; LibcSearcher&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;在开启地址随机化后，通过泄露某一个函数的地址偏移，利用 LibcSearcher 可以搜索到该程序使用的 libc 版本，从而计算出其他函数的地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/lieanu/LibcSearcher.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; LibcSearcher&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; python3 setup.py develop&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;seccomp-tools&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#seccomp-tools&#34;&gt;#&lt;/a&gt; seccomp-tools&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;用来读取 seccomp 沙箱规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; gcc ruby-dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; gem &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; seccomp-tools&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="pwn" scheme="https://coldwinds5167.github.io/tags/pwn/" />
        <updated>2021-12-11T15:05:05.000Z</updated>
    </entry>
    <entry>
        <id>https://coldwinds5167.github.io/2021/12/Re-Entrancy/</id>
        <title>重入攻击</title>
        <link rel="alternate" href="https://coldwinds5167.github.io/2021/12/Re-Entrancy/"/>
        <content type="html">&lt;h1 id=&#34;重入攻击re-entrancy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重入攻击re-entrancy&#34;&gt;#&lt;/a&gt; 重入攻击（Re-Entrancy）&lt;/h1&gt;
&lt;h2 id=&#34;前置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前置&#34;&gt;#&lt;/a&gt; 前置&lt;/h2&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;​		以太坊智能合约能够调用其他外部合约的代码。而这些合约通常也处理以太币，在调用外部合约时，会要求合约提交外部调用，这些外部调用就可以被攻击者劫持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;​		可以通过 fallback 回退函数使合约执行更多的代码，包括回调原合约本身。因此重入攻击有点像间接调用递归函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;​		攻击合约可以回调合约上的一个函数，重新进入合约上的任意位置的代码并执行，如果没有防御措施，合约中的函数可能会被多次执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;大致操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大致操作&#34;&gt;#&lt;/a&gt; 大致操作&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;​		攻击者在外部地址部署攻击合约，并在该合约写入包含 fallback 回退函数的恶意代码，当合约把以太币发送到该地址时，恶意代码会被激活，这些代码会在没有保护的合约上执行函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;fallback回退函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fallback回退函数&#34;&gt;#&lt;/a&gt; Fallback 回退函数&lt;/h3&gt;
&lt;h4 id=&#34;fallback函数的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fallback函数的定义&#34;&gt;#&lt;/a&gt; fallback 函数的定义&lt;/h4&gt;
&lt;figure class=&#34;highlight solidity&#34;&gt;&lt;figcaption data-lang=&#34;Solidity (Ethereum)&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 无函数名、无函数参数、无返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 当要调用的函数找不到时就会触发对 fallback 函数的自动调用。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 由于 Solidity 中提供了编译期检查，所以不能直接通过 Solidity 调用一个不存在的函数。但可以使用 Solidity 的提供的底层函数 address.call 来模拟这一行为。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;FallbackCalled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;fallback函数的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fallback函数的使用&#34;&gt;#&lt;/a&gt; fallback 函数的使用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;​		使用 send () 函数向某个合约直接转账时，这个行为没有发送任何数据，所以接收合约&lt;strong&gt;总是&lt;/strong&gt;会调用 fallback () 函数。&lt;/p&gt;
&lt;p&gt;​		如果要在合约中通过 send () 函数接收以太币，就必须定义 fallback 函数（否则异常），且 fallback 函数必须添加关键字 payable（否则结果将为 false）。&lt;/p&gt;
&lt;p&gt;​		发送以太币一方的合约中的 send () 函数可以不用定义 fallback 函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例&#34;&gt;#&lt;/a&gt; 实例&lt;/h2&gt;
&lt;h3 id=&#34;代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码&#34;&gt;#&lt;/a&gt; 代码&lt;/h3&gt;
&lt;p&gt;​		构造一个漏洞合约，用于存放一定数量的以太币。&lt;/p&gt;
&lt;p&gt;​		同时构造一个攻击合约，用于窃取漏洞合约的以太币。&lt;/p&gt;
&lt;figure class=&#34;highlight solidity&#34;&gt;&lt;figcaption data-lang=&#34;Solidity (Ethereum)&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 声明 solidity 版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;pragma&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;solidity&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token version number&#34;&gt;0.4.23&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 漏洞合约&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;theDAO&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;mapping&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; _credit&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; _who&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; _who&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 存款函数，攻击合约攻击时会先存入一定金额&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;deposit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;payable&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;emit&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 取款函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//_credit 为账户在该合约的存款&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//amount 是单次取款的金额&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 关键漏洞函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            _credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;emit&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 查询函数，查看账户在该合约中的存款&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;creditOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; to&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; _credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 查询函数，查看该合约中的余额&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;checkBalance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;balance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 攻击合约&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Attacker&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    theDAO &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; _newDAO&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;uint256&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; times &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;address&lt;/span&gt; _owner&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Attacker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;theDAO addr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;payable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _owner &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; addr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;attack&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token comment&#34;&gt;// 向漏洞合约存钱&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;deposit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 从漏洞合约取钱&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;checkBalance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;balance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 记录函数，记录 fallback 函数执行次数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; times&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//fallback 回退函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;payable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	times &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        _newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;合约编译-部署与执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合约编译-部署与执行&#34;&gt;#&lt;/a&gt; 合约编译、部署与执行&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;​		合约的编译和部署在在线编译网站&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlbWl4LmV0aGVyZXVtLm9yZw==&#34;&gt; http://remix.ethereum.org&lt;/span&gt; 上进行，也可以选择本地编译器 solc 进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;编译合约&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译合约&#34;&gt;#&lt;/a&gt; 编译合约&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Coldwinds5167/Picture/main/img/image-20210424121204202.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意编译版本尽量与声明版本号一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;部署合约&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部署合约&#34;&gt;#&lt;/a&gt; 部署合约&lt;/h4&gt;
&lt;p&gt;​		本次演示合约将部署在本地环境&lt;strong&gt; JavaScript VM&lt;/strong&gt; 上。&lt;/p&gt;
&lt;p&gt;​		首先部署漏洞合约 theDAO，部署完成后向合约转入一定金额。&lt;/p&gt;
&lt;p&gt;​		接着部署&lt;strong&gt;攻击合约&lt;/strong&gt;，在部署时输入&lt;strong&gt;漏洞合约&lt;/strong&gt;的地址，并在部署时转入一定金额。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​		这里转账顺序与合约源码有关，有三种接受转账方式（部署转账、合约转账、直接转账），在编译前根据需求（安全性、便利性）灵活使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;执行攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行攻击&#34;&gt;#&lt;/a&gt; 执行攻击&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;先分别点击&lt;strong&gt;漏洞合约&lt;/strong&gt;的 checkBalance 选项和&lt;strong&gt;攻击合约&lt;/strong&gt;的 checkBalance 选项，确认攻击前两个合约内的金额数量。&lt;/li&gt;
&lt;li&gt;点击攻击合约的 attack 选项，对&lt;strong&gt;漏洞合约&lt;/strong&gt;进行攻击。&lt;/li&gt;
&lt;li&gt;待攻击完成后，分别点击&lt;strong&gt;漏洞合约&lt;/strong&gt;的 checkBalance 选项和&lt;strong&gt;攻击合约&lt;/strong&gt;的 checkBalance 选项，确认攻击后两个合约内的金额数量。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;攻击合约&lt;/strong&gt;的 times 选项，以&lt;strong&gt;攻击合约&lt;/strong&gt;执行一次 fallback 回退函数为指标，查看攻击次数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;过程分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程分析&#34;&gt;#&lt;/a&gt; 过程分析&lt;/h4&gt;
&lt;figure class=&#34;highlight solidity&#34;&gt;&lt;figcaption data-lang=&#34;Solidity (Ethereum)&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;攻击合约执行_newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;deposit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;向漏洞合约转账&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei，这时漏洞合约会记录攻击合约的存款为&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。其中sender是攻击合约地址，value是我们转入的金额。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt;攻击合约接着执行_newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;意图从漏洞合约中取出&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。这时漏洞合约会比较我们希望取出的金额和存款的金额，因为我们是存&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;取&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;，所以成功通过比较。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3.&lt;/span&gt;这时会执行漏洞合约中的msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;使漏洞合约向攻击合约转账&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4.&lt;/span&gt;攻击合约接收到&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei后执行fallback回退函数，从而执行_newDAO&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;withdraw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;继续从漏洞合约中取出&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5.&lt;/span&gt;因为在上一次取款中，漏洞合约执行msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;后因为回退函数跳转回withdraw的开头，并没有执行_credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;导致攻击合约在漏洞合约中的余额还是&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei（尽管我们已经取走了&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei），因此漏洞合约继续向攻击合约转账&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;wei。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6.&lt;/span&gt;攻击合约会不断重复步骤&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;和&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;，直到gas达到该次交易的上限或者漏洞合约中的余额用尽。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;这时才会继续往下执行_credit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sender&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt;amount&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;让攻击合约在漏洞合约中的存款变为&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;，然后结束合约的执行。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;运行结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行结果&#34;&gt;#&lt;/a&gt; 运行结果&lt;/h4&gt;
&lt;p&gt;​		攻击合约通过重入攻击，窃取了漏洞合约中大量以太币。&lt;/p&gt;
&lt;h2 id=&#34;预防措施&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预防措施&#34;&gt;#&lt;/a&gt; 预防措施&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在合约中，遇到向外部合约转账的情况时，使用 solidity 中内置的 transfer () 函数，而不是 call () 函数。&lt;/p&gt;
&lt;p&gt;transfer () 函数仅会发送 2300 Gas 给用于合约的外部调用，这不足以攻击合约反复重入原合约。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确保所有改变状态变量的逻辑，都发生在以太币被发送出合约（或任何外部调用）之前。&lt;/p&gt;
&lt;p&gt;上面的合约之所以能被重入攻击，很大一部分原因在于漏洞合约在转账时是先转账，再对用户的余额数进行修改，这使得合约在被重入攻击时，用户的余额数一致不变。如果是先修改余额再转账，攻击合约在第一次重入取款函数时，就会因为余额不足而失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入互斥锁，添加一个状态变量，在合约代码执行期间锁定合约，使得代码执行完之前只能有一个线程执行函数，防止函数被重入调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Blockchain" scheme="https://coldwinds5167.github.io/tags/Blockchain/" />
        <updated>2021-12-11T11:56:34.000Z</updated>
    </entry>
    <entry>
        <id>https://coldwinds5167.github.io/2021/12/Blockchain-profiles/</id>
        <title>区块链简介</title>
        <link rel="alternate" href="https://coldwinds5167.github.io/2021/12/Blockchain-profiles/"/>
        <content type="html">&lt;h1 id=&#34;区块链简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区块链简介&#34;&gt;#&lt;/a&gt; 区块链简介&lt;/h1&gt;
&lt;h2 id=&#34;概念定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念定义&#34;&gt;#&lt;/a&gt; 概念定义&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;​		区块链是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODglODYlRTUlQjglODMlRTUlQkMlOEYvMTkyNzYyMzI=&#34;&gt;分布式&lt;/span&gt;数据存储、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclODIlQjklRTUlQUYlQjklRTclODIlQjklRTQlQkMlQTAlRTglQkUlOTMvODQ5MTk1Ng==&#34;&gt;点对点传输&lt;/span&gt;、共识机制、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEElQTAlRTUlQUYlODYlRTclQUUlOTclRTYlQjMlOTUvMjgxNjIxMw==&#34;&gt;加密算法&lt;/span&gt;等计算机技术的新型应用模式。区块链（Blockchain），是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQUYlOTQlRTclODklQjklRTUlQjglODEvNDE0MzY5MA==&#34;&gt;比特币&lt;/span&gt;的一个重要概念，它本质上是一个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEUlQkIlRTQlQjglQUQlRTUlQkYlODMlRTUlOEMlOTYvODcxOTUzMg==&#34;&gt;去中心化&lt;/span&gt;的数据库，同时作为&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQUYlOTQlRTclODklQjklRTUlQjglODEvNDE0MzY5MA==&#34;&gt;比特币&lt;/span&gt;的底层技术，是一串使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUYlODYlRTclQTAlODElRTUlQUQlQTYvNDgwMDAx&#34;&gt;密码学&lt;/span&gt;方法相关联产生的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTYlOEQlQUUlRTUlOUQlOTcvMTA3Njcy&#34;&gt;数据块&lt;/span&gt;，每一个数据块中包含了一批次比特币网络交易的信息，用于验证其信息的有效性（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOTglQjIlRTQlQkMlQUEvOTYzODU1MA==&#34;&gt;防伪&lt;/span&gt;）和生成下一个区块。其具有去中心化、不可篡改、全程留痕、可以追溯、集体维护、公开透明等特点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h2&gt;
&lt;h3 id=&#34;去中心化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#去中心化&#34;&gt;#&lt;/a&gt; 去中心化&lt;/h3&gt;
&lt;p&gt;​		在一个分布有众多节点的系统中，每个节点都具有高度自治的特征。节点之间彼此可以自由连接，形成新的连接单元。任何一个节点都可能成为暂时的中心，实现点对点的直接连接。&lt;/p&gt;
&lt;h3 id=&#34;不可篡改全程留痕可以追溯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不可篡改全程留痕可以追溯&#34;&gt;#&lt;/a&gt; 不可篡改 / 全程留痕 / 可以追溯&lt;/h3&gt;
&lt;p&gt;​		在区块链中，每一个数据块都通过密码学算法计算和记录一段时间系统内全部信息交流的数据，并依据这些数据生成该数据块的指纹用于连接或生成下一个数据块并检验其信息的有效性。&lt;/p&gt;
&lt;p&gt;​		如果修改一个区块的数据，这个区块便不被其他区块承认，而又因为其&lt;strong&gt;去中心化&lt;/strong&gt;的特点，使得大规模修改区块数据十分困难，达到了&lt;strong&gt;不可篡改&lt;/strong&gt;的效果。&lt;/p&gt;
&lt;p&gt;​		区块链上每一个新区块的生成都包含了旧区块的信息，使得区块链储存了系统全部的历史数据，达到了&lt;strong&gt;全程留痕&lt;/strong&gt;的效果。&lt;/p&gt;
&lt;p&gt;​		区块链中的所有节点在每一个区块上都有一个时间戳，表示这个信息是这个时间写入的。又因其&lt;strong&gt;不可篡改&lt;/strong&gt;的特点，使得区块链上每一条数据都可以通过链式结构追本溯源，验证其存在性，达到了&lt;strong&gt;可以追溯&lt;/strong&gt;的特点。&lt;/p&gt;
&lt;h3 id=&#34;集体维护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集体维护&#34;&gt;#&lt;/a&gt; 集体维护&lt;/h3&gt;
&lt;p&gt;​		因为&lt;strong&gt;去中心化&lt;/strong&gt;，区块链中的数据块由系统中所有具有维护功能的节点来共同维护，同时这些节点是开源的，任何人都可以参与。并且每一个节点在参与记录的同时也来验证其他节点记录结果的正确性，维护效率提高，成本降低。&lt;/p&gt;
&lt;h3 id=&#34;公开透明隐私保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公开透明隐私保护&#34;&gt;#&lt;/a&gt; 公开透明 / 隐私保护&lt;/h3&gt;
&lt;p&gt;​		区块链中储存了系统全部的历史信息交流数据，并且&lt;strong&gt;可以追溯&lt;/strong&gt;，使得区块链中的数据&lt;strong&gt;公开透明&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		存储在区块链上的交易信息是公开的，但是账户身份信息是高度加密的。为了保护区块链中用户的隐私，BTC 通过隔断交易地址和地址持有人真实身份的关联（利用公钥哈希值作为交易标识），来达到匿名的效果，即知道有这笔交易，但不知道由谁交易给谁。但通过观察和跟踪区块链的信息，分析重复使用公钥哈希值和多次重复的 IP 信息，还是可以追查到帐户和交易的关联性，同时进行社工分析，就有可能被找出现实中的身份信息。&lt;/p&gt;
&lt;p&gt;​		为了更好地保护隐私，基于加密算法，主要产生了以下四种加密方案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;混币原理：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjclQjclRTUlQjglODElRTYlOUMlOEQlRTUlOEElQTE=&#34;&gt;https://baike.baidu.com/item/ 混币服务&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;环签名：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOEUlQUYlRTclQUQlQkUlRTUlOTAlOEQ=&#34;&gt;https://baike.baidu.com/item/ 环签名&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;同态加密：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOTAlOEMlRTYlODAlODElRTUlOEElQTAlRTUlQUYlODY=&#34;&gt;https://baike.baidu.com/item/ 同态加密&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;零知识证明（ZKP）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUIlQjYlRTclOUYlQTUlRTglQUYlODYlRTglQUYlODElRTYlOTglOEU=&#34;&gt;https://baike.baidu.com/item/ 零知识证明&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;智能合约&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能合约&#34;&gt;#&lt;/a&gt; 智能合约&lt;/h1&gt;
&lt;h2 id=&#34;概念定义-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念定义-2&#34;&gt;#&lt;/a&gt; 概念定义&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;​		智能合约是一种旨在以信息化方式传播、验证或执行合同的计算机协议。智能合约允许在没有第三方的情况下进行可信交易，这些交易可追踪且不可逆转。&lt;/p&gt;
&lt;p&gt;​		智能合约的目的是提供优于传统合约的安全方法，并减少与合约相关的其他交易成本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数字形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数字形式&#34;&gt;#&lt;/a&gt; 数字形式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数字形式意味着合约不得不写入计算机可读的代码中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		简单来讲，智能合约就是部署在区块链上的代码，而代码的执行则是在代码的执行是在本地的 EVM 中。本地的 EVM 读取了区块链上的代码，并在本地运行后，再将结果写入到区块链中。&lt;/p&gt;
&lt;h2 id=&#34;智能合约的安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能合约的安全&#34;&gt;#&lt;/a&gt; 智能合约的安全&lt;/h2&gt;
&lt;p&gt;​		既然智能合约的本质是能够运行的代码，那么相应的，它也会产生出一系列安全漏洞，并且大部分智能合约是开源的，剩余的小部分，也可以进行反编译，这使得智能合约的漏洞会更容易被找到。&lt;/p&gt;
&lt;p&gt;​		PWN 中的智能合约题，便是利用合约代码中的漏洞，对合约进行攻击，从而达到获取 flag 的目的。&lt;/p&gt;
&lt;p&gt;​		比较经典的攻击有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重入攻击&lt;/li&gt;
&lt;li&gt;整数溢出&lt;/li&gt;
&lt;li&gt;伪随机数回滚攻击&lt;/li&gt;
&lt;li&gt;薅羊毛（Airdrop Hunting）&lt;/li&gt;
&lt;li&gt;短地址攻击&lt;/li&gt;
&lt;li&gt;…………&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Blockchain" scheme="https://coldwinds5167.github.io/tags/Blockchain/" />
        <updated>2021-12-11T11:47:26.000Z</updated>
    </entry>
</feed>
